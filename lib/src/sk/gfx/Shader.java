package sk.gfx;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL20.*;

import sk.util.io.Loader;

public class Shader {
	
	private int id;
	
	/**
	 * 
	 * Creates an empty shader.
	 * {@link #create(String path, int type) create()} should be called before use.
	 * 
	 */
	public Shader() {
		
	}
	
	/**
	 * 
	 * Generates shader from a source file.
	 * 
	 * @param path the path to the source file.
	 * @param type the shader type (Eg. GL_VERTEX_SHADER)
	 */
	public Shader(String path, int type) {
		create(path, type);
	}
	
	/**
	 * 
	 * Creates a shader from a source file.
	 * Should not be called if data has already been supplied via constructor.
	 * 
	 * @param path the path to the source file.
	 * @param type the shader type
	 */
	public void create(String path, int type) {
		
		id = glCreateShader(type);
		
		glShaderSource(id, Loader.loadSource(path));
		
		glCompileShader(id);
		
		if(glGetShaderi(id, GL_COMPILE_STATUS) == GL_FALSE) {
			int length = glGetShaderi(id, GL_INFO_LOG_LENGTH);
			throw new IllegalStateException("Failed to compile shader \"" + path + "\": "
					+ glGetShaderInfoLog(id, length));
		}
	}
	
	/**
	 * 
	 * Returns the OpenGL-generated ID of this shader.
	 * 
	 * @return the OpenGL-generated ID of this shader.
	 */
	public int getID() {
		return id;
	}
	
	/**
	 * 
	 * Deletes the OpenGL object generated by this shader.
	 * 
	 */
	public void destroy() {
		glDeleteShader(id);
	}
}